{"version":3,"sources":["utils/fetchClient.ts","utils/enums.ts","utils/loadutil.ts","components/AppContext.tsx","components/UserSelector.tsx","components/PostsList.tsx","components/NewCommentForm.tsx","components/Loader/Loader.tsx","components/PostDetails.tsx","App.tsx","index.tsx"],"names":["BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","ACTIONS","client","getComments","postId","remove","state","comment","copyList","cloneDeep","comments","index","findIndex","elem","id","splice","reducer","action","type","SET_SELECTED_POST","selectedPost","payload","SET_SELECTED_USER","selectedUser","SET_COMMENTS","SET_ERROR","error","IS_LOADING","isLoading","SHOWFORM","showForm","DELETE_COMMENT","initialState","dispatch","StateContext","React","createContext","AppContextProvider","children","useReducer","Provider","value","UserSelector","allUsers","setPosts","useState","showUsers","setShowUsers","isUserSelected","setIsUserSelected","useContext","chooseUser","user","userId","name","res","catch","finally","handleUserSelect","className","classNames","onClick","onKeyDown","role","tabIndex","map","href","PostsList","usersPosts","close","setClose","post","title","openPost","NewCommentForm","initialComment","email","newComment","setNewComment","isNameError","setIsNameError","isEmailError","setIsEmailError","isCommentTextError","setIsCommentTextError","onSubmit","event","preventDefault","length","resp","htmlFor","placeholder","onChange","e","target","split","every","element","currentTarget","hanldeInputName","hanldeInputEmail","hanldeInputCommentText","Loader","PostDetails","showNewCommentForm","setShowNewCommentForm","handleDelete","commentId","useEffect","App","users","setAllUsers","postsByUser","setPostByUser","posts","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.413862ef.chunk.js","sourcesContent":["/* eslint-disable */\nconst BASE_URL = 'https://mate.academy/students-api';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null,\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","export enum ACTIONS {\n  SET_USERS,\n  SET_POSTS,\n  SET_SELECTED_POST,\n  SET_SELECTED_USER,\n  SET_COMMENTS,\n  IS_LOADING,\n  SHOWFORM,\n  DELETE_COMMENT,\n  SET_ERROR,\n}\n","import { Comment, CommentData } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { User } from '../types/User';\nimport { client } from './fetchClient';\n\nexport const getAllUsers = () => {\n  return client.get<User[]>('/users');\n};\n\nexport const getPost = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n\nexport const getComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const getAllComments = () => {\n  return client.get<Comment[]>('/comments');\n};\n\nexport const addComment = (data: CommentData) => {\n  return client.post<Comment>('/comments', data);\n};\n\nexport const deleteComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n","import React, { Dispatch, useReducer } from 'react';\nimport { cloneDeep } from 'lodash';\nimport { Post } from '../types/Post';\nimport { ACTIONS } from '../utils/enums';\nimport { User } from '../types/User';\nimport { Comment } from '../types/Comment';\n\ntype Action = { type: ACTIONS.SET_SELECTED_POST, payload: Post }\n| { type: ACTIONS.SET_SELECTED_USER, payload: User }\n| { type: ACTIONS.SET_COMMENTS, payload: Comment[] }\n| { type: ACTIONS.IS_LOADING, payload: boolean }\n| { type: ACTIONS.SHOWFORM, payload: boolean }\n| { type: ACTIONS.DELETE_COMMENT, payload: Comment }\n| { type: ACTIONS.SET_ERROR, payload: string };\n\ninterface Data {\n  selectedPost: Post,\n  selectedUser: User,\n  comments: Comment[],\n  isLoading: boolean,\n  showForm: boolean,\n  error: string\n}\n\nfunction remove(state: Data, comment: Comment): Comment[] {\n  const copyList = cloneDeep(state.comments);\n  const index = copyList.findIndex(elem => elem.id === comment.id);\n\n  copyList.splice(index, 1);\n\n  return copyList;\n}\n\nfunction reducer(state: Data, action: Action): Data {\n  switch (action.type) {\n    case ACTIONS.SET_SELECTED_POST:\n      return {\n        ...state,\n        selectedPost: action.payload,\n      };\n    case ACTIONS.SET_SELECTED_USER:\n      return {\n        ...state,\n        selectedUser: action.payload,\n      };\n    case ACTIONS.SET_COMMENTS:\n      return {\n        ...state,\n        comments: action.payload,\n      };\n    case ACTIONS.SET_ERROR:\n      return {\n        ...state,\n        error: action.payload,\n      };\n    case ACTIONS.IS_LOADING:\n      return {\n        ...state,\n        isLoading: action.payload,\n      };\n    case ACTIONS.SHOWFORM:\n      return {\n        ...state,\n        showForm: action.payload,\n      };\n    case ACTIONS.DELETE_COMMENT:\n      return {\n        ...state,\n        comments: [...remove(state, action.payload)],\n      };\n    default:\n      return state;\n  }\n}\n\ntype State = {\n  state: Data,\n  dispatch: Dispatch<Action>,\n};\n\nconst initialState: State = {\n  state: {\n    selectedPost: {} as Post,\n    selectedUser: {} as User,\n    comments: [] as Comment[],\n    isLoading: false,\n    showForm: false,\n    error: '',\n  },\n  dispatch: () => { },\n};\n\nexport const StateContext = React.createContext(initialState);\n\ntype Props = {\n  children: React.ReactNode;\n};\n\nexport const AppContextProvider: React.FC<Props> = ({ children }) => {\n  const [state, dispatch] = useReducer(reducer, initialState.state);\n\n  return (\n    <StateContext.Provider value={{\n      state: {\n        ...state,\n      },\n      dispatch,\n    }}\n    >\n      {children}\n    </StateContext.Provider>\n  );\n};\n","import React, {\n  useContext,\n  useState,\n} from 'react';\nimport classNames from 'classnames';\nimport {\n  getPost,\n} from '../utils/loadutil';\nimport { User } from '../types/User';\nimport { Post } from '../types/Post';\nimport { StateContext } from './AppContext';\nimport { ACTIONS } from '../utils/enums';\n\ntype Props = {\n  allUsers: User[],\n  setPosts: (posts: Post[]) => void,\n};\n\nexport const UserSelector: React.FC<Props> = ({ allUsers, setPosts }) => {\n  const [showUsers, setShowUsers] = useState(false);\n  const [isUserSelected, setIsUserSelected] = useState('Choose a user');\n  const { dispatch } = useContext(StateContext);\n\n  function chooseUser(user: User) {\n    setShowUsers(!showUsers);\n    dispatch({ type: ACTIONS.IS_LOADING, payload: true });\n    setIsUserSelected(user.name);\n    dispatch({ type: ACTIONS.SET_SELECTED_USER, payload: user });\n    getPost(user.id)\n      .then(res => {\n        if ('error' in res) {\n          dispatch({ type: ACTIONS.SET_ERROR, payload: 'error' });\n        }\n\n        setPosts(res);\n      })\n      .catch(() => {\n        dispatch({ type: ACTIONS.SET_ERROR, payload: 'error' });\n      })\n      .finally(() => dispatch({ type: ACTIONS.IS_LOADING, payload: false }));\n    dispatch({ type: ACTIONS.SET_SELECTED_POST, payload: {} as Post });\n  }\n\n  function handleUserSelect() {\n    setShowUsers(!showUsers);\n  }\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames('dropdown', {\n        'is-active': showUsers,\n      })}\n    >\n      <div\n        className=\"dropdown-trigger\"\n        onClick={handleUserSelect}\n        onKeyDown={handleUserSelect}\n        role=\"listbox\"\n        tabIndex={0}\n      >\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n        >\n          <span>\n            {isUserSelected}\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {allUsers.map(user => (\n            <a\n              key={user.id}\n              href={`#user-${user.id}`}\n              className=\"dropdown-item\"\n              onClick={() => chooseUser(user)}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n\n    </div>\n  );\n};\n","import React, {\n  useContext, useState,\n} from 'react';\nimport classNames from 'classnames';\nimport { Post } from '../types/Post';\nimport { StateContext } from './AppContext';\nimport { ACTIONS } from '../utils/enums';\n\ntype Props = {\n  usersPosts: Post[],\n};\n\nexport const PostsList: React.FC<Props> = ({ usersPosts }) => {\n  const { state, dispatch } = useContext(StateContext);\n  const [close, setClose] = useState(false);\n\n  function openPost(post: Post) {\n    setClose(!close);\n    if ((post.id === state.selectedPost.id)) {\n      dispatch({ type: ACTIONS.SET_SELECTED_POST, payload: {} as Post });\n    } else {\n      dispatch({ type: ACTIONS.SET_SELECTED_POST, payload: post });\n      dispatch({ type: ACTIONS.SHOWFORM, payload: false });\n    }\n  }\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n\n          {usersPosts.map(post => (\n            <tr data-cy=\"Post\" key={post.id}>\n              <td data-cy=\"PostId\">{post.id}</td>\n\n              <td data-cy=\"PostTitle\">\n                {post.title}\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  type=\"button\"\n                  data-cy=\"PostButton\"\n                  className={classNames('button is-link', {\n                    'is-light': (state.selectedPost.id !== post.id),\n                  })}\n                  onClick={() => openPost(post)}\n                >\n                  {(state.selectedPost.id !== post.id) ? 'Open' : 'Close'}\n                </button>\n              </td>\n\n            </tr>\n          ))}\n\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import React, {\n  useContext,\n  useState,\n} from 'react';\nimport classNames from 'classnames';\nimport { StateContext } from './AppContext';\nimport { addComment, getComments } from '../utils/loadutil';\nimport { ACTIONS } from '../utils/enums';\n\nexport const NewCommentForm: React.FC = () => {\n  const { state, dispatch } = useContext(StateContext);\n  const initialComment = {\n    name: '',\n    body: '',\n    email: '',\n    postId: state.selectedPost.id,\n  };\n\n  const [newComment, setNewComment] = useState(initialComment);\n  const [isNameError, setIsNameError] = useState(false);\n  const [isEmailError, setIsEmailError] = useState(false);\n  const [isCommentTextError, setIsCommentTextError] = useState(false);\n\n  function hanldeInputName(e: React.ChangeEvent<HTMLInputElement>) {\n    e.preventDefault();\n    if (!e.target.value.split('').every(element => element === ' ')) {\n      setNewComment({\n        ...newComment,\n        name: e.currentTarget.value,\n      });\n      setIsNameError(false);\n    }\n  }\n\n  function hanldeInputEmail(e: React.ChangeEvent<HTMLInputElement>) {\n    e.preventDefault();\n    setNewComment({\n      ...newComment,\n      email: e.currentTarget.value,\n    });\n    setIsEmailError(false);\n  }\n\n  function hanldeInputCommentText(e: React.ChangeEvent<HTMLTextAreaElement>) {\n    e.preventDefault();\n    setNewComment({\n      ...newComment,\n      body: e.currentTarget.value,\n    });\n    setIsCommentTextError(false);\n  }\n\n  function handleClear() {\n    setNewComment(initialComment);\n  }\n\n  function handleSubmit(event: React.FormEvent) {\n    event.preventDefault();\n    if (newComment.body.length === 0) {\n      setIsCommentTextError(true);\n    }\n\n    if (newComment.name.length === 0) {\n      setIsNameError(true);\n    }\n\n    if (newComment.email.length === 0) {\n      setIsEmailError(true);\n    }\n\n    if ((newComment.body.length === 0)\n      || (newComment.name.length === 0)\n      || (newComment.email.length === 0)\n    ) {\n      return;\n    }\n\n    dispatch({ type: ACTIONS.IS_LOADING, payload: true });\n    addComment(newComment)\n      .then((res) => {\n        if ('error' in res) {\n          dispatch({ type: ACTIONS.SET_ERROR, payload: 'error' });\n        }\n\n        getComments(state.selectedPost.id)\n          .then(resp => {\n            dispatch({ type: ACTIONS.SET_COMMENTS, payload: resp });\n          });\n      })\n      .finally(() => dispatch({ type: ACTIONS.IS_LOADING, payload: false }));\n    setNewComment({\n      ...newComment,\n      body: '',\n    });\n  }\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={handleSubmit}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            value={newComment.name}\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames('input', {\n              'is-danger': isNameError,\n            })}\n            onChange={(e) => hanldeInputName(e)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {isNameError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {isNameError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames('input', {\n              'is-danger': isEmailError,\n            })}\n            onChange={(e) => hanldeInputEmail(e)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {isEmailError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {isEmailError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames('textarea', {\n              'is-danger': isCommentTextError,\n            })}\n            value={newComment.body}\n            onChange={(e) => hanldeInputCommentText(e)}\n          />\n        </div>\n\n        {isCommentTextError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className=\"button is-link \"\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={handleClear}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, {\n  useContext,\n  useEffect,\n  useState,\n} from 'react';\nimport { Post } from '../types/Post';\nimport { deleteComment, getComments } from '../utils/loadutil';\nimport { StateContext } from './AppContext';\nimport { ACTIONS } from '../utils/enums';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Comment } from '../types/Comment';\nimport { Loader } from './Loader';\n\ntype Props = {\n  post: Post,\n};\n\nexport const PostDetails: React.FC<Props> = ({ post }) => {\n  const { state, dispatch } = useContext(StateContext);\n  const [showNewCommentForm, setShowNewCommentForm] = useState(false);\n\n  function handleShowCommentForm() {\n    setShowNewCommentForm(!showNewCommentForm);\n    dispatch({ type: ACTIONS.SHOWFORM, payload: true });\n  }\n\n  useEffect(() => {\n    if (state.selectedPost.id) {\n      dispatch({ type: ACTIONS.IS_LOADING, payload: true });\n      getComments(state.selectedPost.id)\n        .then(res => {\n          if ('error' in res) {\n            dispatch({ type: ACTIONS.SET_ERROR, payload: 'error' });\n          }\n\n          dispatch({ type: ACTIONS.SET_COMMENTS, payload: res });\n          dispatch({ type: ACTIONS.IS_LOADING, payload: true });\n        })\n        .catch(() => dispatch({ type: ACTIONS.SET_ERROR, payload: 'error' }))\n        .finally(() => dispatch({ type: ACTIONS.IS_LOADING, payload: false }));\n    }\n  }, [post.id, state.selectedPost.id]);\n\n  function handleDelete(comment: Comment) {\n    dispatch({ type: ACTIONS.DELETE_COMMENT, payload: comment });\n    deleteComment(comment.id);\n  }\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${post.id}: `}\n            {post.title}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {post.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {state.isLoading && (\n            <Loader />\n          )}\n\n          {state.error === 'error' && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              Something went wrong\n            </div>\n          )}\n\n          <p className=\"title is-4\">Comments:</p>\n          {state.comments.map(comment => {\n            return (\n              <article\n                className=\"message is-small\"\n                data-cy=\"Comment\"\n                key={comment.id}\n              >\n                <div className=\"message-header\">\n                  <a href={comment.email} data-cy=\"CommentAuthor\">\n                    {comment.name}\n                  </a>\n                  <button\n                    data-cy=\"CommentDelete\"\n                    type=\"button\"\n                    className=\"delete is-small\"\n                    aria-label=\"delete\"\n                    onClick={() => handleDelete(comment)}\n                  >\n                    delete button\n                  </button>\n                </div>\n\n                <div className=\"message-body\" data-cy=\"CommentBody\">\n                  {comment.body}\n                </div>\n              </article>\n            );\n          })}\n\n          {!state.showForm ? (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={handleShowCommentForm}\n            >\n              Write a comment\n            </button>\n          ) : (\n            <NewCommentForm />\n          )}\n        </div>\n\n      </div>\n    </div>\n  );\n};\n","import React, { useContext, useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\nimport classNames from 'classnames';\nimport { UserSelector } from './components/UserSelector';\nimport { getAllUsers } from './utils/loadutil';\nimport { User } from './types/User';\nimport { PostsList } from './components/PostsList';\nimport { Post } from './types/Post';\nimport { StateContext } from './components/AppContext';\nimport { PostDetails } from './components/PostDetails';\nimport { Loader } from './components/Loader';\nimport { ACTIONS } from './utils/enums';\n\nexport const App: React.FC = () => {\n  const [users, setAllUsers] = useState([] as User[]);\n  const [postsByUser, setPostByUser] = useState([] as Post[]);\n  const { state, dispatch } = useContext(StateContext);\n\n  const getPosts = (posts: Post[]) => {\n    setPostByUser(posts);\n  };\n\n  function checkPosts() {\n    if (postsByUser.length === 0 && state.selectedUser.id\n      && !state.isLoading) {\n      return true;\n    }\n\n    return false;\n  }\n\n  useEffect(() => {\n    getAllUsers()\n      .then(res => {\n        setAllUsers(res);\n      })\n      .catch(() => dispatch({ type: ACTIONS.SET_ERROR, payload: 'error' }));\n  }, []);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector allUsers={users} setPosts={getPosts} />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                <p data-cy=\"NoSelectedUser\">\n                  {(!state.selectedUser.id) && (\n                    'No user selected'\n                  )}\n                </p>\n                {postsByUser.length > 0 && (\n                  <div className=\"tile is-child box is-success \">\n                    <PostsList usersPosts={postsByUser} />\n                  </div>\n                )}\n                {state.isLoading && (\n                  <Loader />\n                )}\n                {checkPosts() && (\n                  <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n                    No posts yet\n                  </div>\n                )}\n                {state.error === 'error' && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar', {\n                'Sidebar--open': state.selectedPost.id,\n              },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              <PostDetails post={state.selectedPost} />\n            </div>\n\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\nimport { AppContextProvider } from './components/AppContext';\n\nReactDOM.render(\n  <AppContextProvider>\n    <App />\n  </AppContextProvider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}